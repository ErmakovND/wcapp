{
	"info": {
		"_postman_id": "3fd0228d-7767-4bad-8201-c58ab37d3708",
		"name": "wcapp",
		"description": "Tests for Weather-Currency Application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "currency",
			"item": [
				{
					"name": "currency: none last",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var code;\r",
									"\r",
									"pm.test(\"Status code is OK or NOT_FOUND\", function() {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404])\r",
									"    code = pm.response.code;\r",
									"});\r",
									"\r",
									"if (code === 200) {\r",
									"    const json = pm.response.json();\r",
									"    pm.test(\"Response is not array\", function() {\r",
									"        pm.expect(json).not.to.be.an('array');\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Response is empty\", function() {\r",
									"        pm.response.to.have.body(\"\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/currency",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"currency"
							]
						}
					},
					"response": []
				},
				{
					"name": "currency: ok last",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"last\", getRandomInt(3, 10))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is array\", function() {\r",
									"    pm.expect(json).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Length not greater than asked\", function() {\r",
									"    pm.expect(json).to.not.have.length.greaterThan(pm.variables.get(\"last\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Items have property 'rate'\", function() {\r",
									"    json.all(function(v) {\r",
									"        pm.expect(v).to.have.property('rate');\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"Items have property 'date'\", function() {\r",
									"    json.all(function(v) {\r",
									"        pm.expect(v).to.have.property('date');\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/currency?last={{last}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"currency"
							],
							"query": [
								{
									"key": "last",
									"value": "{{last}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "currency: bad last",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"last\", getRandomInt(-10, -1))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is BAD_REQUEST\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is empty\", function() {\r",
									"    pm.response.to.have.body(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/currency?last={{last}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"currency"
							],
							"query": [
								{
									"key": "last",
									"value": "{{last}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests for Currency component",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "weather",
			"item": [
				{
					"name": "weather: none last, none location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is not array\", function() {\r",
									"    pm.expect(json).not.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Reponse has default location\", function() {\r",
									"    pm.expect(json.location).eqls(\"Moscow\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/weather",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"weather"
							]
						}
					},
					"response": []
				},
				{
					"name": "weather: none last, ok location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is not array\", function() {\r",
									"    pm.expect(json).not.to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Reponse has custom location\", function() {\r",
									"    pm.expect(json.location).eqls(\"London\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/weather?location=London",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"weather"
							],
							"query": [
								{
									"key": "location",
									"value": "London"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weather: ok last, none location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"last\", getRandomInt(2, 8))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is array\", function() {\r",
									"    pm.expect(json).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Length not greater than asked\", function() {\r",
									"    pm.expect(json).to.not.have.length.greaterThan(pm.variables.get(\"last\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Items have default location\", function() {\r",
									"    json.all(function(v) {\r",
									"        pm.expect(v.location).eqls(\"Moscow\");\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"Items have property 'date'\", function() {\r",
									"    json.all(function(v) {\r",
									"        pm.expect(v).to.have.property('date');\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/weather?last={{last}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"weather"
							],
							"query": [
								{
									"key": "last",
									"value": "{{last}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weather: ok last, ok location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const json = pm.response.json();\r",
									"\r",
									"pm.test(\"Response is array\", function() {\r",
									"    pm.expect(json).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Length not greater than asked\", function() {\r",
									"    pm.expect(json).to.not.have.length.greaterThan(pm.variables.get(\"last\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Items have custom location\", function() {\r",
									"    json.all(function(v) {\r",
									"        pm.expect(v.location).eqls(\"London\");\r",
									"    })\r",
									"});\r",
									"\r",
									"pm.test(\"Items have property 'date'\", function() {\r",
									"    json.all(function(v) {\r",
									"        pm.expect(v).to.have.property('date');\r",
									"    })\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"last\", getRandomInt(2, 8))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/weather?last={{last}}&location=London",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"weather"
							],
							"query": [
								{
									"key": "last",
									"value": "{{last}}"
								},
								{
									"key": "location",
									"value": "London"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weather: bad last, none location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"last\", getRandomInt(-10, -1))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is BAD_REQUEST\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is empty\", function() {\r",
									"    pm.response.to.have.body(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/weather?last={{last}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"weather"
							],
							"query": [
								{
									"key": "last",
									"value": "{{last}}"
								},
								{
									"key": "location",
									"value": "London",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weather: bad last, ok location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"last\", getRandomInt(-10, -1))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is BAD_REQUEST\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is empty\", function() {\r",
									"    pm.response.to.have.body(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/weather?last={{last}}&location=London",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"weather"
							],
							"query": [
								{
									"key": "last",
									"value": "{{last}}"
								},
								{
									"key": "location",
									"value": "London"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weather: bad last, bad location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"last\", getRandomInt(-10, -1))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is BAD_REQUEST\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is empty\", function() {\r",
									"    pm.response.to.have.body(\"\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/weather?last={{last}}&location=hubabuba",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"weather"
							],
							"query": [
								{
									"key": "last",
									"value": "{{last}}"
								},
								{
									"key": "location",
									"value": "hubabuba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weather: none last, bad location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is BAD_REQUEST\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/weather?location=hubabuba",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"weather"
							],
							"query": [
								{
									"key": "location",
									"value": "hubabuba"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "weather: ok last, bad location",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function getRandomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"pm.variables.set(\"last\", getRandomInt(2, 8))"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is BAD_REQUEST\", function() {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/weather?last={{last}}&location=hubabuba",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"weather"
							],
							"query": [
								{
									"key": "last",
									"value": "{{last}}"
								},
								{
									"key": "location",
									"value": "hubabuba"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests for Weather component",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "predict",
			"item": [
				{
					"name": "predict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Predicted rate is adequate\", function() {\r",
									"    const rate = parseFloat(pm.response.json());\r",
									"    pm.expect(rate).to.be.lessThan(90).and.greaterThan(60);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/predict",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"predict"
							]
						}
					},
					"response": []
				}
			],
			"description": "Tests for Predict component"
		}
	]
}